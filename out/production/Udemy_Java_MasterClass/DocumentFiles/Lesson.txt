Q: What is an Expression?
Ans. The expression is the code segment that is no the right side of the equals sign
in an assignment or declaration statement.

java primitive types:

----------------------------------------------------------------
Whole number          |  Real number(Floating poing or Decimal) |
                      |                                         |
-----------------------------------------------------------------
    byte               |                                        |
    Short              |         float                          |
    int                |        double                          |
    long               |                                        |
-----------------------------------------------------------------
    Single Character    |   Boolean Value                       |
-----------------------------------------------------------------
        char            |       boolean                         |
                        |                                       |
-----------------------------------------------------------------


Q: Why should we choose double?
Ans: First, it's actually faster to process on many modern computers.

    That's because computers have, at the chip level, the functionality to actually
    deal with these double numbers faster than the equivalent float.

    Second, the java libraries that we'll get into later in the course,
    particularly math functions, are often written to process doubles and not floats,
    and to return the result as a double.

    java selected the double because its more precise, and it can handle a larger range of numbers.

Q: What is a method?
Ans: A method is a collection of statements, one or more, that performs an operation.

Q: What is the meaning of '=' sign and '==' sign?
Ans: '=' is an assignment operator and '==' is an Equality operator.

Q: What is a code block?
Ans: A code block allows more than one statement to be executed, in other words, a block of code.

Q: What is Method?
Ans: A method declares executable code that can be invoked, passing a fixed number of values as arguments.

Q: What is method overloading?
Ans: Method overloading occurs when a class has multiple methods, with
the same name, but the methods are declared with different parameters.
So we can execute a method with one name but call it with different
arguments.
java can resolve which method it needs to execute, based on the arguments
being passed, when the method is invoked.

Q: what is method signature?
Ans: A method signature consists of the name of the method, and the
uniqueness of the declaration of its parameters.

Q: While statement

while (condition){
    //statements
}

inside the curly braces, it will indicate the body of the while loop.

do{
// statements
} while(condition);

For a for loop:

    for(int i=0; i<100; i++){
        System.out.println("i = "+1);
    }

    if we convert to while loop:
    int i=0;
    while(i<100){
        System.out.println("i = "+1);
        i++;
    }

Q: What is an Object?
Ans: An object is called an instance of a particular class.

Q: Try and Catch

Ans: The try statement actually has two code bocks.
The first is declared directly after the try keyword, and this
code block end , and is followed by the declaration of the catch keyword.
The catch keyword includes own code block.

try {
// statements that might get errors
} catch (Excepteion e){
//code to 'handle' the exception
}


*****************************  From Deepak, www.Smartprogramming.in  *******

Q: What is OOPs?
Ans: Object-Oriented Programming system / Structure.
    OOP is a programming paradigm / methodology.
    inside the programming paradigm there are different ways, like:
    a. Object-oriented paradigm
    b. Procedural paradigm.
    c. functional paradigm.
    d. logical paradigm.
    e. Structural paradigm.
There are 6 main pillars / concepts of OOPs:
1. Class  2. Object & Method     3. Inheritance      4. Polymorphism
5. Abstraction  6. Encapsulation

Smalltalk was the first purely OOPs.
Java, C++, Python all are the also OOPs.


(1). -------*********** Class ************----------

            Class:

                  | ---> Dog
      Animal ->   | ---> Cat
                  | ---> Elephant


                  | ---> Sparrow
       Birds ->   | ---> Parrot
                  | ---> Eagle


                  | ---> Toyota
         Car ->   | ---> RangRover
                  | ---> Lexus

        Here Animal is a class and Dog, Cat, Elephant are Object.
        Birds and Car are class and others are objects.

1. Class is the collection of Objects
2. Class is not a real world entity. It is just a template or blueprint.
3. Class does not occupy memory. As, 'Animal' there is no physical existence.

Syntax of Class:
access-Modifier Class ClassName
{
        Body of class( Inside this body methods, constructor, fields or blocks may contain)
}

(2). -------*********** Method & Object ************----------

        Method:
Q: What is Method?
Ans: A set of codes which perform a particular task.

Advantage of Method.
a. Code reusability
b. code optimization

Sytax of Method:

access-modifier return type methodName (list of parameters)
{
        Body of method.
}

            Object

Q: What is Object?
Ans: Object is a instance of a class. Object is a real world entity.
    Object occupies memory.

    Theses 3 points should consist of Object.
Object consists of identity -> Name (Dog)
Object consists of State/Attribute -> Color, age, breed etc.
Object consists of Behaviour -> Eat, run, bark

Q: How to create Object?
Ans:    1. By using New keyword
        2. By using NewInstance() method.
        3. By using clone() method.
        4. By using deserialization
        5. By using factory method.

Q: How to create Object by using New keyword?
Ans:    1). Declaration
                It is declaring a variable name with an object type.
                Example: Animal buzo: (Where 'Animal' is ClassName and 'buzo'
                         is reference_variable_name)
        2). Instantiation
                By using 'new' keyword we can instantiate the object.
                Animal buzo = new Animal(); is an example. Here Animal () is
                the constructor and used to initiate the object.
        3). Initialization
                To initialize the object, we can use the constructor.

                        Instantiate the object
                         |
                         V
          Animal buzo = new Animal();
             |      |               |
             V      V               V
             Class  reference       Constructor
             name   variable name

Syntax of Object:
        Animal buzo = new Animal();

We can call method through object by using dot(.). To call the behaviour /Method of class.
        buzo.run(); or
        buzo.eat();

Example of Class and Object:

        class Animal // there is access-modifier means default is available
        {
            public void eat() // Method
            {
                System.out.println("I am Eating");
            }

            public static void main(String [] args)
            {
                System.out.println("1");
                // if we run this program like this, it will not
                // print 'I am Eating', because without object the
                // method will not work. That's why we need a object
                // to call the method. So, now we will create an
                // object and then call method.

                Animal buzo = new Animal();
                buzo.eat(); // now it will print the 'I am Eating'
                            // The another method run() we can call
                            // under this object or we can call through
                            // another object.
                   // we can use:

                   Animal tomy = new Animal();
                   tomy.run();

                   // it is fully dependent on the project requirement.
            }
            public void run()
            {
                System.out.println("I am running");
            }

        }


Q: How to initialize an object?
Ans: We can initialize an object by 3 methods,
        a. by using reference variable
        b. by method
        c. by constructor


  a.    By using reference variable: to initiate an object:
        Example:
        class Animal
        {
            String color; // this 'color' is reference variable
            int age;

            public static void main(String [] args)
            {
                Animal buzo = new Animal();
                buzo.color = "Black";
                buzo.age = 10;
                System.out.println(buzo.color +" " +buzo.age);

                //here 'buzo' is the object of Animal and initiate this
                // object by using .(dot) operator.
                //the color of buzo initiate to Black and age of buzo
                //initiate to 10.
            }
        }

   b.   By using method

   class Animal
   {
        String color;
        int age;
        void initObject(String c, int a)
        {
            color = c;
            age = a;
        }
        void display()
        {
            System.out.println(color +" "+age);
        }

        public static void main(String[] args)
        {
            Animal buzo = new Animal();
            buzo.initObject("Black", 10);
                //here by the method initObject we can initiate
                //the object.
            buzo.display();

        }
   }

   c. By using constructor:

Q: What is a Constructor?
Ans: A Constructor is used in the creation of an object, that's an instance of a class.
It's a special type of code block that has a specific name and parameters, much like a method.
It has the same name as the class itself, and it doesn't return any values.

If a class contains no constructor declarations, then a default constructor is implicitly declared.

Another definition (By Deepak): 1). Constructor is a block (similar to method)
                                    having same name as that of class Name.
                                2). Does not have any return type, not even void.
                                3). The only modifiers are applicable for constructor are
                                    public, protected, default and private.
                                4). It executes automatically when we create an Object.

Q: What is the purpose of Constructor?
Ans:
     a). Constructors are used to initialize an Object.

            Example:

            class Employee
            {
                String name; // Both are Instance variables
                int employeeID; // Instance variable

                // Example of constructor:
                Employee(String name, int employeeID)
                this.name = name;
                this.employeeID = employeeID;

                Public static void main(String [] args)
                {                                               // This constructor is used to
                    Employee e1 = new Employee("Ferdous", 123); // initialize the object.
                    Employee e2 = new Employee("Abdullah", 7897);
                }
            }

     b). There are 3 types of constructor
            i). Default constructor (no-argument constructor)
            ii). No-arg constructor (User defined)
            iii). Parameterized constructor


            i). Default constructor is created by Compiler not by JVM.
                    a). If we create any constructor then this automatically
                        created constructor will not create any constructor.
           ii). If user create any constructor without any argument,
                then it is called No-argument constructor (user-defined).
          iii). The constructor in which the argument is available
                and created by user is called parameterized constructor.

Q: Why there is no return type in constructor?
Ans: The main function of constructor is to initialize of an Object.
     When it only initializes and object, and there will be no
     return value of anything. That's why there is no return value.


(3). -------*********** Inheritance ************----------


Q: What is Inheritance?
Ans: It is inheriting the properties of parent class into child class.
    Or
Inheritance is the procedure by which one object acquires all the
properties and behaviors of a parent object.

Example:

        class Animal   // parent class or Super class
        {
            void eat()
            {
                    System.out.println("I  am eating");
            }
        }

// there is another class name Dog is created and we would like to
// call the method of first class (eat method).

        class Dog extends Animal  // Dog is subclass or child class
        {
            public static void main(String [] args)
            {
                Dog d = new Dog();
                d.eat(); // if we don't use the words "extends Animal"
                         // we could not call eat() method.

            }
        }

Q: What is the relationship between Animal and Dog?
Ans: It is { IS-A } relationship, Dog is a Animal.
     Inheritance is a IS-A relationship.

Q: What are the advantage of inheritance?
Ans:
        (1). Code reusability.
        (2). We can achieve polymorphism (method overriding).
Q: What is the main disadvantage of inheritance?
Ans: It is tightly coupled between parent and child class. If any
     changes in the parent class it will directly affect on child class.

Q: How many types of inheritance?
Ans:
        a). Single inheritance
        b). Multi level inheritance
        c). Hierarchical inheritance
        d). Multiple inheritance. Ambiguity problem.
        e). Hybrid inheritance. Diamond case problem.

    but in java only 3 types of inheritances are available.

Q: Are all properties of parent class transfer to child class?
Ans: No, all properties will not transfer. Any constructor inside
     the parent class will not transfer and any private method
     will not transfer.

Q: Types of relationship between two classes in java.
Ans: Broadly defined as:
                        a). IS-A relationship ( Inheritance)
                        b). HAS-A relationship (Association)
                                Association is also divided into
                                two parts:
                                    1. Aggregation
                                    2. Composition


Q: Advantage of relationship
Ans:
        a). Code Reusablity.
        b). cost cutting.
        c). Reduced redundancy.

       ********** Inheritance (IS_A) relationship  **********
We have already discussed in the inheritance chapter.
All advantage and disadvantages are discussed there.

        ********** Association (HAS-A) relationship ***********

        Example:
                    class Student
                    {
                        String name;
                        int roll no. ;

                        // here alread build one relationship, such as
                        // Student {HAS-A} name
                        // Student {HAS-A} roll no.
                    }

        Another example is:

                class Engine
                {

                }

                class Car
                {
                        // If we make an object of Engine inside the Car
                        // class, then the HAS-A relationship will build.

                        Engine engine = new Engine();

                        // So, by using 'new' keyword we can build a relationship.

                }

// In these Engine and Car classes if we don't use 'Extends' keyword
// then the relationship will not be inheritance and all properties will not
// come to the child class.
// By using the HAS-A relationship in between two classes the
// relationship will not be tightly coupled.
// We can choose some properties only.

        Association is classified into two types:
        Aggregation and Composition

        Aggregation has week bonding and Composition has Strong bonding.


(4). -------*********** Polymorphism ************----------

Q: What is Polymorphism?
Ans: Polymorphism (Method Overloading and Method Overriding) , poly means many
and morphism means many.
Such as shape,  shape may be circled, square, or rectangle etc.
for water, ice, steam and water all are the forms of water.

Q: How many types of Polymorphism?
Ans: There are two types of Polymorphism.
     1. Compile time Polymorphism (Static Polymorphism)
              It can be achieved by Method Overloading.
              It is handled by Compiler.
     2. Run-Time Polymorphism (Dynamic Polymorphism).
               It can be achieved by Method Overriding.
               It is handled by JVM.


Q: How to achieve Method overloading and Overriding?

_________________________________________________________________________
Method Overloading              |            Method Overriding
-------------------------------------------------------------------------
1). Same Name                   |   1). Same Name
2). Same class                  |   2). Different class
3). Different arguments         |   3). Same arguments
    a. No. of arguments         |       a. No. of arguments
    b. Sequence of arguments    |       b. Sequence of arguments
    c. Types of arguments       |       c. Types of arguments
                                |   4). Inheritance relation (IS-A) must
--------------------------------------------------------------------------

Example of Method Overloading:

    class Test
    {
        void show()
        {
        System.out.println("1");
        }

        void show()
        {
            System.out.println("2");
        }

        public static void main(String [] args)
        {
        Test t = new Test();
        t.show();
        // upto this program, compiler will be confused which show method
        // will call it.
        // This type of error is called 'Ambiguity error'.

        // until now it fulfil only first two condition of Method overloading.
        // for full achievement of overloading we have look for the third
        // conditions. That means we have to look for arguments, no. of arguments,
        // sequence of arguments or type of arguments. Then the compiler will
        // not confuse. At least any one of show() method should modify with
        // inserting agreements. After then the class will be look like:
        }
    }

class Test
    {
        void show(int a)
        {
        System.out.println("1");
        }

        void show()
        {
            System.out.println("2");
        }

        public static void main(String [] args)
        {
        Test t = new Test();
        t.show(10);
        }

    }
#########   Some interview questions  ###############

Q: Can we achieve method overloading by changing the return type of method only?
Ans: No, because of Ambiguity.
Q: Can we overload java main method?
Ans: yes, we can have any number of main methods in a class by method
    overloading. This is because JVM always calls main() method which
    receives string array as arguments only.
Q: Method overloading and Type Promotion
Ans: One type is promoted to another implicitly if no matching datatype is found.
If any argument in a method is not matching with any argument in the original
method then it started to automatic promotion.
Q: Different cases of Type Promotion.

Method Overriding:

class Test
{
    void show()
    {
        System.out.println("1");
    }
}

class Xyz extends Test  // it must be needs extends Test
{
    void show()
    {
        System.out.println("2");
    }
    public static void main(String [] args)
    {
        Test t = new Test();
        t.show();

        Xyz x = new Xyz();
        x.show();
    }
}

Q: Do overriding method mush have same return type (or Subtype)?
Ans: From Java 5.0 onwards it is possible to have different return type for a
overriding method in child class, but child's return type should be
subtype of parent's return type. This phenomena is known as covariant return type.

Q: Overriding access modifier.
Ans: The access modifier for and overriding method can allow more, but not less,
access than the overriden method. For example, a protected instance method
in the super-class can be made public, but not private, in the subclass.
Doing so, will generate compile-time error.


############ Overriding and Exception-Handling #############

Below are two rules to note when overriding methods related to exception handling.

Rule 1: If the super-class override method does not throws and exception,
subclass overriding method can only throw the unchecked exception,
throwing checked exception will lead to compile-time error.

Rule 2: If the super-class overridden method does throws an exception,
subclass overriding method can only throw same, subclass exception. Throwing
parent exception in Exception hierarchy will lead to compile time error.
Also there is no issue if subclass overriden method is not throwing any exception.

Q: Overriding and Abstract Method
Ans: Abstract methods in an interface or abstract class are meant to be
overriden  in derived concrete classes otherwise compile-time error will be
thrown.

Q: Invoking overridden method from subclass.
Ans: We can call parent class method in overriding method using super keyword.

Q: Which method cannot overriden?
Ans:
Final methods can not be overridden: if we don't want a method to be overridden,
we declare it as final.
Static methods can not be overridden:
(Methods Overriding vs Method Hiding) When you define a static method with same
signature as a static method in base class, it is known as method hiding.

Private methods can not be overridden :
Private methods cannot be overriden as they are bonded during compiling time.
Therefore, we can't even override private methods in a subclass.

(5). -------*********** Abstraction ************----------

Difference between Abstraction and Encapsulation:

____________________________________________________________________________
        Abstraction                 |       Encapsulation
----------------------------------------------------------------------------
1. Abstraction is detail hiding     | 1. Encapsulation is data hiding
    (Implementation hiding)         |    (information hiding).
2. Data abstraction deals with      | 2. Encapsulation groups together data
    exposing the interface to the   |    and methods that act upon the data.
    user and hiding the details of  |
    implementation.                 |
-----------------------------------------------------------------------------

Abstraction --> |
                | --> Abstract Class (0 to 100%)
                | --> Interfaces (100%)

Example:

        abstract class Vehicle
        {
            int numberOfTyres;
            abstract void start();
        }

 Abstract method is a method where there is no body available in the method.
 For any abstract method the must be abstract. But for any abstract
 class it is not essential to have the abstract method. If any abstract
 class have the abstract method then it will achieve 100% abstraction.

    If a regular class extends an abstract class, then the class must have
    to implement all the abstract methods of abstract parent class or it
    has to be declared abstract as well.

Abstract classes cannot be instantiated, means we cannot create an Object
of Abstract class.


    abstract class Vehicle
    {
        abstract void start();
    }

    class Car extends Vehicle
    {
        void start()
        {
            System.out.println("Car starts with key");
        }
    }

    class Scooter extends Vehicle
    {
        void start()
        {
            System.out.println("Scooter starts with kick");
        }

        public static void main(String [] args)
        {
            // Vehicle v = new Vehicle();  // we cannot make object of abstract class
            Car c = new Car();
            c.start();

            Scooter s = new Scooter();
            s.start();
        }
    }



################----------****** Interface *******######################


Interfaces are blueprint of the class. It specify what a class must do and not how to do.

Q: Uses of interface:
1. it is used to achieve abstraction.
2. it supports multiple inheritance.
3. it can be used to achieve loose coupling.

Example:
        interface InterfaceName
        {
            methods // it must be public and abstract methods
                    // if we don't use public abstract
                    // compiler automatically set public abstract and
                    // all fields will be final.
                    // it will be 'public static final int a = 10;' like this.


            fields
        }

        Example:

        interface I1
        {
            public void show();
        }

        class Test implements I1
        {
            public void show()
            {
                System.out.println("1");
            }

            public static void main(String [] args)
            {
            Test t = new Test();
            t.show();
            }
        }


Q: What is interface?
Ans: 1. Interface is a mechanism to achieve abstraction in java.
     2. Interface is similar to abstract calss but having all the methods of abstract
        type i.e. it cannot have a method body.
     3. Since Java 8, we can have default and static methods in an
        interface.
     4. Since Java 9, we can have private methods in an interface.

Q: Why use java interface?
Ans: 1. It is used to achieve abstraction.
     2. By interface, we can support the functionality of
        multiple inheritance.
     3. It can be used to achieve loose coupling.
Q: Syntax:
interface interfaceName
{
    //constants fields
    // abstract methods
}
Q: Similarities between Abstract class & Interfaces
Ans: 1. Both can contain abstract methods.
     2. We cannot create an instance of abstract class & interfaces.

Q: Difference between Abstract & interface.
Ans:

____________________________________________________________________________
        Abstract Class              |            Interface
----------------------------------------------------------------------------
1. Abstract class can have instance |1. Methods of a Java interface are
    methods that implements a       |   implicitly abstract and cannot have
    default behavior.               |   implementations.
2. An abstract class may contain    |2. Interface contains public, static
    non-final variables.            |   & final variables only.
3. Methods & variables can have     |3. Interface contains public, static &
    any access-modifier i.e. public |   final variables only.
    protected, default & private.   |
4. java abstract class should be    |4. Java interface should be implemented
    extended using kyword "extends".|   using keyword "implements".
5. An abstract class can extends    |5. An interface can extend another java
    another java class and implement|   interface only.
    multiple java interfaces.       |
----------------------------------------------------------------------------


(6). -------*********** Encapsulation ************----------

Q: What is Encapsulation?
Ans: Encapsulation in java is a mechanism of wrapping the data (variables)
    and code acting on the data (methods) together as a single unit.
Q: Steps to achieve encapsulation
Ans: 1. Declare the variables of a class as private.
     2. Provide public setter and getter methods to modify and view the
        variables values.
in encapsulation, the variables of a class will be hidden from other calasses,
and can be accessed only through the methods of their current class.
This concept is known as Data Hiding.

Example:
        class Employee
        {
            private int empId;  // due to this 'private' it can only be used
                                // inside the class.
        }


Example program is available in "Encapsulation.java".


Q: 'this' keyword.

Example of a class,

    class Test
    {
        int i; // instance variable.
        void setValues(int i) // here this i is local variable
        {
            this.i=i; // this keyword refers to the current class instance variable.
        }
        void show()
        {
        System.out.println(i);
        }
    }

    class Xyz
    {
        public static void main(String[] args)
        {
            Test t = new Test();
            t.setValues(10); // this will set the value of local variable value. i.e i=10
            t.show();  // it will print 10
        }
    }
Q: What are the uses of 'this' keyword?
Ans:
    'this' keyword is a reference variable which is used to
    refer immediate parent class object.
    'this'  can be used in different ways:
    1. this keyword can be used to refer current class instance variable.
    2. this keyword can be used to invoke current class method (implicitly).
    3. this() can be used to invoke current class constructor.
    4. this can be used to pass as an argument in the method call.
    5. this can be used to pass as an argument in the constructor call.
    6. this can be used to return the current class instance from the method.

    All of these uses available in the intelij.

Q: 'super' keyword
Ans:
    'super' is a reference variable which refers to the parent class object. The uses are as:

    1. 'super' keyword can be used to refer immediate parent class instance variable.
    2. 'super' keyword can be used to invoke immediate parent class method.
    3. super() can be used to invoke immediate parent class constructor.

Q: Difference between this vs super.
Ans: The keyword super is use dto access or call the parent class
members (variables and methods).
The keyword this is used to call the current class members(variable and methods).
'this' is required , when we have a parameter with the same name, as an
instance variable or field.
Q: Method overloading vs method overriding.


Q: 'final' keyword uses
Ans:
    1. We create any final variable, it becomes constant, we cannot change
        the value of final variable.
    2. If we create any final method, we cannot override it.
    3. If we create any final class, we cannot extends or inherit it.

Q: 'static' keyword uses
Ans:
    static is primarily is an access modifier
____________________________________________________________________________
        Access Modifiers            | Non Access Modifiers
----------------------------------------------------------------------------
    public                          |       Static
    private                         |       final
    protected                       |       abstract
    default (No modifier)           |       synchronized
                                    |       transient
                                    |       volatile
                                    |       strictfp
--------------------------------------------------------------------------
Where can we use 'static' keyword?

1). variable (in class level), not in local variable (it will show error).
2). Methods
3). block
4). inner class(nested class) ( we cannot use with outer class)

static variable is used to memory management.

static variable uses program is available in the intelij

'static' method, how to use and why to use?
Ans:
    'static' method, static method belongs to class not object.
    static methods can be called directly by class name as follows:
    ClassName.methodName();

Q: Rules for 'static' methods
Ans:
    1. 'static' methods belongs to the class, not to the object.
    2. A 'static' method can be accessed directly by class name and
        doesn't need any object.
    3. A 'static' method can access only static data. It cannot access
        non-static data (instance data).
    4. A 'static' method can call only other static methods and
        cannot call a not-static method.
    5. A 'static' method cannot refer to 'this' or 'super' keyword in anyway.


Q: What is static block?
Ans:
    'static' blocks executes automatically when the class is loaded in the memory
    Example of a 'static' block:

    class Test
    {
            static
            {
                // this is static block.

                System.out.println("Hello");
            }
    }

Q: Can we create multiple static block in a class?
Ans: Yes, we can create